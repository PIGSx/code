from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import pandas as pd
import io
import requests
import os

app = Flask(__name__)
CORS(app)

AUTH_URL = "http://127.0.0.1:5004"  # API de autentica√ß√£o

# --- Fun√ß√£o principal de processamento ---
def process_data(planilha_file, planilha_prazos_file=None, logradouro_file=None):
    try:
        # Ler planilha principal
        df = pd.read_excel(planilha_file)

        # 1. Remover colunas desnecess√°rias
        columns_to_drop = [
            "Nome da Origem", "Unidade Executante", "C√≥digo TSS", "Prioridade", "Equipe",
            "PDE", "Munic√≠pio", "Cod. Munic√≠pio", "Setor", "Rota", "Quadra", "Local",
            "Vila", "SubLocal", "ATO", "√Årea de Servi√ßo", "Grupo de Faturamento",
            "Data Inser√ß√£o", "Data Agendada", "Prazo de Execu√ß√£o", "Notas de Acatamento",
            "Arsesp"
        ]
        df = df.drop(columns=columns_to_drop, errors='ignore')

        # 2. Filtrar Fam√≠lia
        df = df[~df['Fam√≠lia'].isin(['FISCALIZA√á√ÉO', 'VISTORIA'])]

        # 3. Filtrar Contratos
        df = df[~df['Contrato'].isin([
            '4600042975 - CONSORCIO MANUTEN√á√ÉO SUZANO ZC',
            '4600054507 - ENOPS ENGENHARIA S/A.',
            '4600054538 - CONS√ìRCIO LEITURA ITAQUERA',
            '4600057156 - CONSORCIO DARWIN TB LESTE',
            '4600060030 - CONS√ìRCIO AMPLIA REDE LESTE',
            '4600060107 - CONS√ìRCIO AMPLIA REDE ALTO TIET√ä',
            '4600060108 - CONS√ìRCIO AMPLIA REDE ALTO TIET√ä',
            '9999999999 - SABESP'
        ])]

        # 4. Ajustar ATC
        df['ATC'] = df['ATC'].astype(str).str.extract(r'(\d+)')[0]

        # 5. Filtrar Descri√ß√£o TSS
        df = df[df['Descri√ß√£o TSS'] != 'TROCAR HIDR√îMETRO PREVENTIVA AGENDADA']

        # 6. Data de Compet√™ncia
        if 'Data de Compet√™ncia' in df.columns:
            df['Data de Compet√™ncia'] = pd.to_datetime(df['Data de Compet√™ncia'], errors='coerce')

        # 7. Mesclar planilha de prazos
        if planilha_prazos_file:
            df_nomes_prazos = pd.read_excel(planilha_prazos_file)
            df = pd.merge(df, df_nomes_prazos[['Descri√ß√£o TSS','PRAZO (HORAS)']],
                          on='Descri√ß√£o TSS', how='left')

        # 8. Mesclar logradouro
        if logradouro_file:
            df_logradouro = pd.read_excel(logradouro_file)
            df = pd.merge(df, df_logradouro[['Logradouro','P√°gina Guia']],
                          left_index=True, right_index=True, how='left')
            df = df.drop(columns=['Logradouro'], errors='ignore')

        # 9. Endere√ßo final
        if 'N√∫mero' in df.columns and 'Complemento' in df.columns:
            df['Endere√ßo'] = (
                df['Endere√ßo'].fillna('').str.strip() + ' ' +
                df['N√∫mero'].fillna('').astype(str) + ' ' +
                df['Complemento'].fillna('').astype(str)
            ).str.strip()
            df = df.drop(columns=['N√∫mero','Complemento'], errors='ignore')

        # 10. Data final
        if 'PRAZO (HORAS)' in df.columns and 'Data de Compet√™ncia' in df.columns:
            df['Data Final'] = df['Data de Compet√™ncia'] + pd.to_timedelta(df['PRAZO (HORAS)'], unit='h')

        # 11. Reorganizar colunas
        columns_order = ['Status', 'N√∫mero OS', 'ATC', 'Endere√ßo', 'Bairro', 'P√°gina Guia',
                         'Data de Compet√™ncia', 'Data Final', 'Descri√ß√£o TSS',
                         'PRAZO (HORAS)', 'Contrato', 'Causa', 'Resultado']
        available_columns = [col for col in columns_order if col in df.columns]
        df = df[available_columns]

        # 12. Salvar em BytesIO
        output_stream = io.BytesIO()
        df.to_excel(output_stream, index=False, engine="openpyxl")
        output_stream.seek(0)
        return output_stream

    except Exception as e:
        return str(e)

# --- Rotas Flask ---
@app.route("/")
def home():
    return "API code-pendente rodando com sucesso üöÄ"

@app.route("/process", methods=["POST"])
def process():
    token_header = request.headers.get("Authorization")
    if not token_header or not token_header.startswith("Bearer "):
        return jsonify({"error": "Token ausente"}), 401
    token = token_header.split(" ")[1]

    # Valida√ß√£o do token com AUTH API
    try:
        resp = requests.post(f"{AUTH_URL}/validate", json={"token": token})
        if resp.status_code != 200 or not resp.json().get("valid"):
            return jsonify({"error": "Token inv√°lido ou expirado"}), 403
    except Exception as e:
        return jsonify({"error": f"Falha ao validar token: {e}"}), 500

    # Receber arquivos
    planilha_file = request.files.get("relatorio_fechados")
    planilha_prazos_file = request.files.get("planilha_prazos")
    logradouro_file = request.files.get("pagina_guia")
    nome_do_relatorio = request.form.get("nome_do_relatorio") or "saida.xlsx"

    if not planilha_file:
        return jsonify({"error": "Nenhum arquivo principal enviado"}), 400

    processed_stream = process_data(planilha_file, planilha_prazos_file, logradouro_file)
    if isinstance(processed_stream, str):
        return jsonify({"error": processed_stream}), 500

    return send_file(
        processed_stream,
        as_attachment=True,
        download_name=nome_do_relatorio,
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5002))
    app.run(host="0.0.0.0", port=port, debug=True)
